!function(e,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports,require("d3-scale"),require("d3-shape")):"function"==typeof define&&define.amd?define(["exports","d3-scale","d3-shape"],a):a((e=e||self).d3=e.d3||{},e.d3,e.d3)}(this,(function(e,a,t){"use strict";const r=(e,a)=>{if(a<0||a>1||isNaN(a))throw new Error(`Unable to calculate ${a} quantile`);var t=(e.length-1)*a,r=Math.floor(t),l=t-r;return l<.001?e[r]:Math.floor(e[r]*(1-l)+e[r+1]*l+.5)},l=[[],[[0,1]],[[0,1],[.25,.75]],[[0,1],[.15,.85],[.3,.7]],[[0,1],[.1,.9],[.2,.8],[.3,.7]],[[0,1],[.1,.9],[.2,.8],[.3,.7],[.4,.6]]],n=(e,a)=>(Array.isArray(a)?a:l[a]).map(([a,t])=>[r(e,a),r(e,t)]);e.Smokechart=(e,l)=>{const s={scaleX:a.scaleLinear(),scaleY:a.scaleLinear()};let o=[],c=[],d=Math.floor(1e5*Math.random());const i=(e,a)=>(e&&!Array.isArray(e)&&(a=e,e=void 0),a&&Object.assign(s,a),e&&i.data(e),d=Math.floor(1e5*Math.random()),i);return i.data=e=>e?(o=e.map(e=>[...e.filter(e=>!isNaN(e))].sort((e,a)=>e-a)),c=e.map(e=>({errors:[...e.filter(e=>isNaN(e))].length,count:e.length})),i):o,i.adjustScaleRange=()=>{if(s.scaleX&&s.scaleX.domain([0,o.length]),!s.scaleY)return;let e=1/0,a=-1/0;return o.forEach(t=>{t.length&&(t[0]<e&&(e=t[0]),t[t.length-1]>a&&(a=t[t.length-1]))}),s.scaleY.domain([e,a]),i},i.scaleX=e=>e?(s.scaleX=e,i):s.scaleX,i.scaleY=e=>e?(s.scaleY=e,i):s.scaleY,i.line=(e=.5)=>[t.line().x(e=>s.scaleX(e[0])).y(e=>s.scaleY(e[1]))(o.reduce((a,t,l)=>{const n=r(t,e);return[...a,[l-.5,n],[l+.5,n]]},[]))],i.smokeBands=(e=2)=>{const a=t.line().x(e=>s.scaleX(e[0])).y(e=>s.scaleY(e[1])),r=o.reduce((t,r,l)=>{const s=n(r,e),o=l-.5;return[...t,s.map(([e,t])=>a([[o,e],[o,t],[o+1,t],[o+1,e]])||"")]},[]);return r[0].map((e,a)=>r.map(e=>e[a]).join(""))},i.countErrors=()=>c.map(e=>e.errors),i.chart=(e,a)=>{(null==a?void 0:a.bands)&&e.selectAll("path.smokechart-band"+d).data(i.smokeBands(null==a?void 0:a.bands)).enter().append("path").classed("smokechart-band",!0).attr("fill",(null==a?void 0:a.bandsColor)||"rgba(0,0,0,0.18)").attr("d",e=>e),e.selectAll("path.smokechart-line"+d).data(i.line(.5)).enter().append("path").classed("smokechart-line",!0).attr("shape-rendering","crispEdges").attr("stroke",(null==a?void 0:a.lineColor)||"#ff0000").attr("stroke-width",(null==a?void 0:a.lineWidth)||2).attr("fill","transparent").attr("d",e=>e);const t=(null==a?void 0:a.errorRadius)||0;if(t>0){const a=c.map(({errors:e,count:a},r)=>{if(e>0&&a>0){const l=s.scaleX(r),n=2*Math.PI*e/a,o=t*Math.sin(n)+l,c=t*Math.cos(n+Math.PI)+1+t;return`M ${l},${t+1} v-${t} A ${t},${t} 0,0,1 ${o},${c} Z`}});e.selectAll("path.smokechart-errs").data([a.join(" ")]).enter().append("path").attr("fill","#f30").attr("d",e=>e)}},i(e,l)},e.calculateSmokeBands=n,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=d3-smokechart.min.js.map
