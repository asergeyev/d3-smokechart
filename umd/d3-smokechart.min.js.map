{"version":3,"file":"d3-smokechart.min.js","sources":["../dist/index.js"],"sourcesContent":["import { line } from \"d3-shape\";\nconst quantile = (probes, q) => {\n    if (q < 0 || q > 1 || isNaN(q))\n        throw new Error(`Unable to calculate ${q} quantile`);\n    var alq = (probes.length - 1) * q;\n    var idx = Math.floor(alq);\n    var diff = alq - idx;\n    return diff < 0.001 ? probes[idx] : Math.floor(probes[idx] * (1 - diff) + probes[idx + 1] * diff + 0.5);\n};\nconst smokeAreaConfig = [\n    [],\n    [[0, 1]],\n    [[0, 1], [.25, .75]],\n    [[0, 1], [.15, .85], [.3, .7]],\n    [[0, 1], [.1, .9], [.2, .8], [.3, .7]],\n    [[0, 1], [.1, .9], [.2, .8], [.3, .7], [.4, .6]]\n];\nexport const calculateSmokeBands = (v, bands) => {\n    const bandKind = smokeAreaConfig[bands];\n    return bandKind.map(([from, to]) => [quantile(v, from), quantile(v, to)]);\n};\nconst flameAreaConfig = [\n    [],\n    [.5],\n    [.5, .75],\n    [.5, .7, .9],\n    [.4, .55, .7, .85],\n    [.5, .6, .7, .8, .9]\n];\nexport const Smokechart = (smokeData, opts) => {\n    const props = {};\n    let data = [];\n    const smoke = (smokeData, opts) => {\n        if (smokeData && !Array.isArray(smokeData)) {\n            opts = smokeData;\n            smokeData = undefined;\n        }\n        if (opts)\n            Object.assign(props, opts);\n        if (smokeData)\n            smoke.data(smokeData);\n        return smoke;\n    };\n    smoke.data = (smokeData) => {\n        if (smokeData) {\n            data = smokeData.map(arr => [...arr.filter(n => !isNaN(n) !== undefined)].sort((a, b) => a - b));\n            return smoke;\n        }\n        return data;\n    };\n    smoke.adjustScaleRange = () => {\n        if (props.scaleX)\n            props.scaleX.domain([0, data.length]);\n        if (!props.scaleY)\n            return;\n        let minY = Infinity;\n        let maxY = -Infinity;\n        data.forEach(arr => {\n            if (arr.length) {\n                if (arr[0] < minY)\n                    minY = arr[0];\n                if (arr[arr.length - 1] > maxY)\n                    maxY = arr[arr.length - 1];\n            }\n        });\n        props.scaleY.domain([minY, maxY]);\n        return smoke;\n    };\n    smoke.scaleX = (newScale) => {\n        if (newScale) {\n            props.scaleX = newScale;\n            return smoke;\n        }\n        return props.scaleX;\n    };\n    smoke.scaleY = (newScale) => {\n        if (newScale) {\n            props.scaleY = newScale;\n            return smoke;\n        }\n        return props.scaleY;\n    };\n    smoke.line = (q = 0.5) => {\n        const l = line()\n            .x(d => (props.scaleX ? props.scaleX(d[0]) : d[0]))\n            .y(d => (props.scaleY ? props.scaleY(d[1]) : d[1]));\n        const quantileData = data.reduce((reslt, values, idx) => {\n            const p = quantile(values, q);\n            return [...reslt, [idx - 0.5, p], [idx + 0.5, p]];\n        }, []);\n        return [l(quantileData)];\n    };\n    smoke.smokeBands = (bCount = 2) => {\n        const l = line()\n            .x(d => (props.scaleX ? props.scaleX(d[0]) : d[0]))\n            .y(d => (props.scaleY ? props.scaleY(d[1]) : d[1]));\n        const bands = data.reduce((reslt, values, idx) => {\n            const bandData = calculateSmokeBands(values, bCount);\n            const x = idx - 0.5;\n            const bandLines = bandData.map(([y0, y1]) => l([\n                [x, y0],\n                [x, y1],\n                [x + 1, y1],\n                [x + 1, y0],\n            ]) || \"\");\n            return [...reslt, bandLines];\n        }, []);\n        return bands[0].map((_, columnIdx) => bands.map(row => row[columnIdx]).join(\"\"));\n    };\n    smoke.chart = (selection, args) => {\n        selection\n            .selectAll(\"path.smokechart-band\")\n            .data(smoke.smokeBands(3))\n            .enter()\n            .append(\"path\")\n            .classed(\"smokechart-band\", true)\n            .attr(\"fill\", \"rgba(0,0,0,.25)\")\n            .attr(\"d\", (d) => d);\n        selection\n            .selectAll(\"path.smokechart-line\")\n            .data(smoke.line(0.5))\n            .enter()\n            .append(\"path\")\n            .classed(\"smokechart-line\", true)\n            .attr(\"stroke\", \"#ff0000\")\n            .attr(\"stroke-width\", 1.1)\n            .attr(\"fill\", \"transparent\")\n            .attr(\"d\", (d) => d);\n    };\n    return smoke(smokeData, opts);\n};\n"],"names":["quantile","probes","q","isNaN","Error","alq","length","idx","Math","floor","diff","smokeAreaConfig","calculateSmokeBands","v","bands","map","from","to","smokeData","opts","props","data","smoke","Array","isArray","undefined","Object","assign","arr","filter","n","sort","a","b","adjustScaleRange","scaleX","domain","scaleY","minY","Infinity","maxY","forEach","newScale","line","x","d","y","l","reduce","reslt","values","p","smokeBands","bCount","bandData","y0","y1","_","columnIdx","row","join","chart","selection","args","selectAll","enter","append","classed","attr"],"mappings":"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"}